name: Build and Publish

on:
  schedule:
    - cron: '0 0 */7 * *' # Regularly build weekly
  push:
  release: 
    types: [published]
  repository_dispatch:
    types: [upstream-updated]

jobs:

  # TODO: use actions/cache for Yarn
  # TODO: use matrix to speed up
  build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'master'
          fetch-depth: 500

      - name: Setup GO Environment
        uses: actions/setup-go@v2
        with:
          go-version: '^1.14.6'

      - name: Cache GO Packages
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Save Dockerimage.lock
        run: |
          grep DOCKER_BUILD_IMAGE= Makefile | awk -F"=" '{print $2}' | tee -a Dockerimage.lock
          cat GO_VERSION | tee -a Dockerimage.lock

      - name: Cache Docker images
        uses: actions/cache@v2
        with:
          path: |
            /var/lib/docker/overlay2
            /var/lib/docker/images
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerimage.lock') }}
          restore-keys: ${{ runner.os }}-docker-

      - name: Get dependencies
        run: |
          make download-tools
          nvm install 12.10.0 && nvm alias default 12.10.0
        shell: bash -l {0}

      - name: Install dependencies
        run: |
          go get
          (cd ui && yarn)

      - name: Build UI
        run: make build-js

      - name: Bundle WebUI
        run: make embed-static

      - name: Check & Test
        run: |
          make test
          make check

      - name: Set version and build date
        run: |
          echo "::set-env name=GOTIFY_VERSION::$(git describe --tags | cut -c 2-)"
          echo "::set-env name=BUILD_DATE::$(date "+%F-%T")"

      - name: Compile Binary
        env:
          LD_FLAGS: -w -s -X main.Version=${{ env.GOTIFY_VERSION }} -X main.BuildDate=${{ env.BUILD_DATE }} -X main.Commit=${{ github.sha }} -X main.Mode=prod
        run: make build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/gotify-*

  image-tags: 
    runs-on: ubuntu-latest
    
    outputs:
      ref: ${{ env.IMAGE_REF_TAG }}
      sha: ${{ env.IMAGE_SHA_TAG }}

    steps:
      - name: Set image ref tag
        run: |
          import os
          gref = os.environ['GITHUB_REF'].split('/')[1:]
          rref = ''
          if gref[0] == 'heads':
              if ref[1] == 'master':
                  rref = 'latest'  
              else:
                  rref = '-'.join(gref[1:])
          elif gref[0] == 'pull':
              rref = f'pr-{"-".join(gref[1:])}'
          elif gref[0] == 'tags':
              rref = gref[1]
          if rref:              
            print(f'::set-env name=IMAGE_REF_TAG::{rref}')
          else:
            exit(-1)
        shell: python3 {0}

      - name: Set image SHA tag
        run: |
          import os
          sha = os.environ['GITHUB_SHA'][:7]
          if sha: 
            print(f'::set-env name=IMAGE_SHA_TAG::git-{sha}')
          else:
            exit(-1)
        shell: python3 {0}

  # Build container image
  build-amd64-image:
    runs-on: ubuntu-latest
    needs: build-artifacts
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'master'

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/

      - name: Build linux/amd64 image
        run: |
          cp build/gotify-linux-amd64 docker/gotify-app
          chmod +x docker/gotify-app
          docker build -f docker/Dockerfile -t gotify:amd64 docker/
          rm docker/gotify-app

      - name: Export image
        run: docker save -o="docker/gotify-amd64-container-image.tar" gotify

      - name: Upload Image
        uses: actions/upload-artifact@v2
        with:
          name: gotify-amd64-container-image
          path: docker/gotify-amd64-container-image.tar

  # TODO: Multi-platform build

  # Push image to different registries
  docker-hub:
    runs-on: ubuntu-latest
    needs: [build-amd64-image, image-tags]
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Get the amd64 images
        uses: actions/download-artifact@v2
        with:
          name: gotify-amd64-container-image

      - name: Import the image
        run: docker load -i gotify-amd64-container-image.tar

      - name: Tag the image
        run: |
          docker tag gotify:amd64 ${{ env.DOCKER_USERNAME }}/gotify-server:${{ needs.image-tags.outputs.ref }}
          docker tag gotify:amd64 ${{ env.DOCKER_USERNAME }}/gotify-server:${{ needs.image-tags.outputs.sha }}

      - name: Login docker cli
        run: echo ${{ env.DOCKER_PASSWORD }} | docker login --username ${{ env.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        run: docker push ${{ env.DOCCKER_USERNAME }}/gotify-server

  gce-cr:
    runs-on: ubuntu-latest
    needs: [build-amd64-image, image-tags]
    env:
      GCR_HOST: us.gcr.io
      GCE_PROJECT: ${{ secrets.GCE_PROJECT }}
      GCE_CR_TOKEN: ${{ secrets.GCE_CR_TOKEN }}
    steps:
      - name: Get the amd64 images
        uses: actions/download-artifact@v2
        with:
          name: gotify-amd64-container-image

      - name: Import the image
        run: docker load -i gotify-amd64-container-image.tar

      - name: Tag the image
        run: |
          docker tag gotify:amd64 ${{ env.GCR_HOST }}/${{ env.GCE_PROJECT }}/gotify-server:${{ needs.image-tags.outputs.ref }}
          docker tag gotify:amd64 ${{ env.GCR_HOST }}/${{ env.GCE_PROJECT }}/gotify-server:${{ needs.image-tags.outputs.sha }}

      - name: Login docker cli
        run: echo $GCE_CR_TOKEN | docker login --username _json_key --password-stdin  https://${{ env.GCR_HOST }}

      - name: Push image
        run: docker push ${{ env.GCR_HOST }}/${{ env.GCE_PROJECT }}/gotify-server